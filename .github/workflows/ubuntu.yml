# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: ubuntu test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} test

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ${{github.workspace}}/build/HBoxTest/HBoxTest && ${{github.workspace}}/build/HRCTest/HRCTest && ${{github.workspace}}/build/HCPPObjectTest/HCPPObjectTest

    - name: Install i686 toolchain
      run: sudo apt-get update &&  sudo apt-get install gcc-i686-linux-gnu g++-i686-linux-gnu build-essential make ninja-build 

    - name: Configure CMake(x86)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build-x86 -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/test/cmake/toolchain-i686.cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} test

    - name: Build(x86)
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build-x86 --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build-x86
      run: ${{github.workspace}}/build-x86/HBoxTest/HBoxTest && ${{github.workspace}}/build-x86/HRCTest/HRCTest && ${{github.workspace}}/build-x86/HCPPObjectTest/HCPPObjectTest

    - name: Install aarch64 toolchain
      run: sudo apt-get update &&  sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu qemu-user

    - name: Configure CMake(aarch64)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: LDFLAGS="-static -static-libgcc -static-libstdc++"  cmake -B ${{github.workspace}}/build-aarch64 -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/test/cmake/toolchain-aarch64.cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} test

    - name: Build(aarch64)
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build-aarch64 --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build-aarch64
      run: qemu-aarch64 ${{github.workspace}}/build-aarch64/HBoxTest/HBoxTest && qemu-aarch64 ${{github.workspace}}/build-aarch64/HRCTest/HRCTest && qemu-aarch64 ${{github.workspace}}/build-aarch64/HCPPObjectTest/HCPPObjectTest


    - uses: actions/setup-python@v5
      with:
            python-version: '3.9'
    
    - name: Test scons
      working-directory: test
      run:  pip install scons && scons
